[gd_scene load_steps=16 format=2]

[ext_resource path="res://actors/Player.tscn" type="PackedScene" id=1]
[ext_resource path="res://prefab/Border.tscn" type="PackedScene" id=2]
[ext_resource path="res://scripts/StageManager.tscn" type="PackedScene" id=3]
[ext_resource path="res://scenes/gameplay/pause-layer/pause-layer.tscn" type="PackedScene" id=4]
[ext_resource path="res://scenes/Level1.gd" type="Script" id=5]
[ext_resource path="res://scenes/HUD.tscn" type="PackedScene" id=6]
[ext_resource path="res://prefab/Camera2DWithScreenShake.tscn" type="PackedScene" id=7]
[ext_resource path="res://prefab/GlowEnvironment.tscn" type="PackedScene" id=8]
[ext_resource path="res://prefab/GameBorder.tscn" type="PackedScene" id=9]
[ext_resource path="res://actors/HealthPickupSpawner.tscn" type="PackedScene" id=10]
[ext_resource path="res://assets/bgm/Skeletons.mp3" type="AudioStream" id=11]
[ext_resource path="res://assets/GlowEnv.tres" type="Environment" id=13]

[sub_resource type="CanvasItemMaterial" id=2]
light_mode = 1

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;
render_mode unshaded;

uniform int iterations = 20;
uniform float formuparam = 1.00;

uniform int volsteps = 20;
uniform float stepsize = 0.1;

uniform float zoom = 0.800;
uniform float tile = 0.5;
uniform float speed = 1.001;

uniform float brightness = 0.002;
uniform float darkmatter = 0.100;
uniform float distfading = 0.650;
uniform float saturation = 0.750;

uniform vec2 iResolution = vec2(192, 192);
uniform vec2 iMouse = vec2(0,0);

float SCurve (float value) {

    if (value < 0.5)
    {
        return value * value * value * value * value * 16.0; 
    }
    
    value -= 1.0;
    
    return value * value * value * value * value * 16.0 + 1.0;
}

void fragment()
{
	//get coords and direction
	vec2 uv=FRAGCOORD.xy/iResolution.xy-.5;
	uv.y*=iResolution.y/iResolution.x;
	vec3 dir=vec3(uv*zoom,1.);
	float time=TIME*speed+.25;

	//mouse rotation
	float a1=0.5+iMouse.x/iResolution.x*2.;
	float a2=0.8+iMouse.y/iResolution.y*2.;
	mat2 rot1=mat2(vec2(cos(a1),sin(a1)),vec2(-sin(a1),cos(a1)));
	mat2 rot2=mat2(vec2(cos(a2),sin(a2)),vec2(-sin(a2),cos(a2)));
	dir.xy*=rot1;
	dir.xz*=rot2;
	vec3 from=vec3(1.0,0.5,0.5);
	from-=vec3(0.0,time,0.0);
	from.xz*=rot1;
	from.xy*=rot2;
	
	//volumetric rendering
	float s=0.1,fade=1.;
	vec3 v=vec3(0.);
	for (int r=0; r<volsteps; r++) {
		vec3 p=from+s*dir*0.5;
		p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold
		float pa,a=pa=0.;
		for (int i=0; i<iterations; i++) { 
			p=abs(p)/dot(p,p)-formuparam; // the magic formula
			a+=abs(length(p)-pa); // absolute sum of average change
			pa=length(p);
		}
		float dm=max(0.,darkmatter-a*a*.001); //dark matter
		a = pow(a, 2.3); // add contrast
		if (r>6) fade*=1.-dm; // dark matter, don't render near
		//v+=vec3(dm,dm*.5,0.);
		v+=fade;
		v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance
		fade*=distfading; // distance fading
		s+=stepsize;
	}
    
	v=mix(vec3(length(v)),v,saturation); //color adjust
    
    vec4 C = vec4(v*.01,1.);
    
     	C.r = pow(C.r, 0.35); 
 	 	C.g = pow(C.g, 0.36); 
 	 	C.b = pow(C.b, 0.38); 
 	
    vec4 L = C;   	
    
    COLOR.r = mix(L.r, SCurve(C.r), 1.0); 
    COLOR.g = mix(L.g, SCurve(C.g), 1.0); 
    COLOR.b = mix(L.b, SCurve(C.b), 1.0);     	
	
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/iterations = 20
shader_param/formuparam = 1.004
shader_param/volsteps = 20
shader_param/stepsize = 0.1
shader_param/zoom = 0.8
shader_param/tile = 0.5
shader_param/speed = 0.001
shader_param/brightness = 0.002
shader_param/darkmatter = 0.1
shader_param/distfading = 0.65
shader_param/saturation = 0.75
shader_param/iResolution = Vector2( 192, 192 )
shader_param/iMouse = Vector2( 0, 0 )

[node name="Level1" type="Node2D"]
script = ExtResource( 5 )

[node name="GlowEnvironment" parent="." instance=ExtResource( 8 )]
environment = ExtResource( 13 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( 352, 240 )
scale = Vector2( 4, 4 )

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 352, 240 )

[node name="ColorRect2" type="ColorRect" parent="Viewport"]
material = SubResource( 4 )
margin_right = 352.0
margin_bottom = 240.0
color = Color( 0, 0, 0, 1 )

[node name="Container" type="Node2D" parent="."]

[node name="HealthPickupSpawner" parent="." instance=ExtResource( 10 )]
spawnTime = 1.0

[node name="Border4" parent="." instance=ExtResource( 2 )]
modulate = Color( 1, 1, 1, 0.121569 )
position = Vector2( -376, 336 )
scale = Vector2( 2.12, 3.2 )
dir = 2
posX = -40
posY = 336

[node name="Border3" parent="." instance=ExtResource( 2 )]
modulate = Color( 1, 1, 1, 0.121569 )
position = Vector2( 1688, 392 )
scale = Vector2( 2.12, 3.2 )
dir = 3
posX = 1328
posY = 392

[node name="Border2" parent="." instance=ExtResource( 2 )]
modulate = Color( 1, 1, 1, 0.121569 )
position = Vector2( 656, 912 )
scale = Vector2( 3.2, 2.12 )
dir = 1
posX = 656
posY = 832

[node name="Border" parent="." instance=ExtResource( 2 )]
modulate = Color( 1, 1, 1, 0.121569 )
position = Vector2( 648, -168 )
scale = Vector2( 3.2, 2.12 )
posX = 648
posY = -128

[node name="Player" parent="." instance=ExtResource( 1 )]
position = Vector2( 622, 552 )

[node name="StageManager" parent="." instance=ExtResource( 3 )]
timePerStage = 20.0

[node name="PauseLayer" parent="." instance=ExtResource( 4 )]

[node name="Camera2D" parent="." instance=ExtResource( 7 )]

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 11 )
autoplay = true
bus = "bgm"

[node name="GameBorder" parent="." instance=ExtResource( 9 )]
position = Vector2( 1168, 360 )
scale = Vector2( 0.491285, 1.9602 )

[node name="GameBorder2" parent="." instance=ExtResource( 9 )]
position = Vector2( 112, 360 )
scale = Vector2( 0.491285, 1.9602 )

[node name="HUD" parent="." instance=ExtResource( 6 )]
margin_left = 20.0
margin_top = 14.0
margin_right = 20.0
margin_bottom = 14.0
